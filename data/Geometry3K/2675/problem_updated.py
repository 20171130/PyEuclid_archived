import sympy
from pyeuclid.formalization.relation import *

pi = sympy.pi


conditions = [(Angle(Point('C'),Point('F'),Point('D')) - Variable('angle_1')), Between(Point('D'),Point('B'),Point('F')), Collinear(Point('B'),Point('D'),Point('F')), (Length(Point('D'),Point('E')) - Variable('radius_E')), (Length(Point('E'),Point('F')) - Variable('radius_E')), (Angle(Point('C'),Point('F'),Point('E')) - sympy.simplify('pi/2')), (Angle(Point('D'),Point('E'),Point('F')) - ((sympy.simplify('102') / sympy.simplify('180')) * sympy.simplify('pi')))]
goal = Variable('angle_1')
solution = '(129)/180*pi'

diagrammatic_relations = {NotCollinear(Point('B'),Point('C'),Point('D')), SameSide(Point('B'),Point('E'),Point('C'),Point('F')), OppositeSide(Point('B'),Point('C'),Point('D'),Point('E')), NotCollinear(Point('B'),Point('D'),Point('E')), NotCollinear(Point('B'),Point('C'),Point('E')), OppositeSide(Point('B'),Point('F'),Point('D'),Point('E')), OppositeSide(Point('B'),Point('C'),Point('E'),Point('F')), SameSide(Point('D'),Point('F'),Point('C'),Point('E')), NotCollinear(Point('C'),Point('D'),Point('E')), SameSide(Point('C'),Point('F'),Point('D'),Point('E')), NotCollinear(Point('C'),Point('E'),Point('F')), SameSide(Point('C'),Point('E'),Point('D'),Point('F')), SameSide(Point('D'),Point('F'),Point('B'),Point('E')), OppositeSide(Point('B'),Point('D'),Point('C'),Point('E')), SameSide(Point('B'),Point('D'),Point('C'),Point('F')), SameSide(Point('C'),Point('E'),Point('B'),Point('F')), Between(Point('D'),Point('B'),Point('F')), SameSide(Point('D'),Point('E'),Point('C'),Point('F')), NotCollinear(Point('B'),Point('C'),Point('F')), OppositeSide(Point('C'),Point('D'),Point('E'),Point('F')), SameSide(Point('B'),Point('D'),Point('E'),Point('F')), OppositeSide(Point('B'),Point('F'),Point('C'),Point('E')), SameSide(Point('B'),Point('E'),Point('C'),Point('D')), NotCollinear(Point('C'),Point('D'),Point('F')), OppositeSide(Point('E'),Point('F'),Point('C'),Point('D')), SameSide(Point('E'),Point('F'),Point('B'),Point('C')), NotCollinear(Point('B'),Point('E'),Point('F')), OppositeSide(Point('B'),Point('F'),Point('C'),Point('D')), OppositeSide(Point('C'),Point('F'),Point('B'),Point('E')), OppositeSide(Point('C'),Point('D'),Point('B'),Point('E')), NotCollinear(Point('D'),Point('E'),Point('F')), SameSide(Point('D'),Point('F'),Point('B'),Point('C')), SameSide(Point('C'),Point('E'),Point('B'),Point('D')), SameSide(Point('D'),Point('E'),Point('B'),Point('C'))}
