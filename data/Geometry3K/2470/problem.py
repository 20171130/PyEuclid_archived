import sympy
from pyeuclid.formalization.relation import *

pi = sympy.pi


conditions = [(Length(Point('M'),Point('P')) - sympy.simplify('10')), Between(Point('R'),Point('M'),Point('Q')), Collinear(Point('M'),Point('Q'),Point('R')), Between(Point('R'),Point('L'),Point('P')), Collinear(Point('L'),Point('P'),Point('R')), Rhombus(Point('L'),Point('M'),Point('P'),Point('Q')), (Angle(Point('M'),Point('L'),Point('Q')) - ((((sympy.simplify('2') * (Variable('x') ** sympy.simplify('2'))) - sympy.simplify('10')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Angle(Point('M'),Point('P'),Point('Q')) - (((sympy.simplify('8') * Variable('x')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Length(Point('M'),Point('P')) - sympy.simplify('10')), Rhombus(Point('L'),Point('M'),Point('P'),Point('Q')), (Angle(Point('M'),Point('L'),Point('Q')) - ((((sympy.simplify('2') * (Variable('x') ** sympy.simplify('2'))) - sympy.simplify('10')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Angle(Point('M'),Point('P'),Point('Q')) - (((sympy.simplify('8') * Variable('x')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Length(Point('M'),Point('P')) - sympy.simplify('10')), Quadrilateral(Point('L'),Point('M'),Point('P'),Point('Q'))]
goal = (((Length(Point('L'),Point('M')) + Length(Point('M'),Point('P'))) + Length(Point('P'),Point('Q'))) + Length(Point('L'),Point('Q')))
solution = '40'

diagrammatic_relations = [SameSide(Point('Q'),Point('R'),Point('M'),Point('P')), NotCollinear(Point('L'),Point('P'),Point('Q')), SameSide(Point('L'),Point('R'),Point('M'),Point('P')), NotCollinear(Point('L'),Point('M'),Point('R')), SameSide(Point('P'),Point('Q'),Point('L'),Point('M')), NotCollinear(Point('L'),Point('M'),Point('Q')), OppositeSide(Point('L'),Point('P'),Point('M'),Point('R')), SameSide(Point('L'),Point('M'),Point('P'),Point('Q')), OppositeSide(Point('M'),Point('Q'),Point('P'),Point('R')), SameSide(Point('L'),Point('R'),Point('P'),Point('Q')), SameSide(Point('M'),Point('R'),Point('L'),Point('Q')), NotCollinear(Point('L'),Point('Q'),Point('R')), SameSide(Point('P'),Point('R'),Point('L'),Point('M')), SameSide(Point('M'),Point('R'),Point('P'),Point('Q')), NotCollinear(Point('P'),Point('Q'),Point('R')), SameSide(Point('L'),Point('Q'),Point('M'),Point('P')), OppositeSide(Point('L'),Point('P'),Point('Q'),Point('R')), OppositeSide(Point('L'),Point('P'),Point('M'),Point('Q')), SameSide(Point('P'),Point('R'),Point('L'),Point('Q')), OppositeSide(Point('M'),Point('Q'),Point('L'),Point('R')), NotCollinear(Point('L'),Point('M'),Point('P')), OppositeSide(Point('M'),Point('Q'),Point('L'),Point('P')), NotCollinear(Point('M'),Point('P'),Point('R')), SameSide(Point('Q'),Point('R'),Point('L'),Point('M')), SameSide(Point('M'),Point('P'),Point('L'),Point('Q')), NotCollinear(Point('M'),Point('P'),Point('Q'))]

new_diagrammatic_relations = {NotCollinear(Point('M'),Point('P'),Point('R')), OppositeSide(Point('M'),Point('Q'),Point('L'),Point('P')), OppositeSide(Point('L'),Point('P'),Point('M'),Point('Q')), NotCollinear(Point('L'),Point('M'),Point('R')), OppositeSide(Point('L'),Point('P'),Point('M'),Point('R')), SameSide(Point('Q'),Point('R'),Point('L'),Point('M')), SameSide(Point('L'),Point('R'),Point('P'),Point('Q')), SameSide(Point('L'),Point('M'),Point('P'),Point('Q')), SameSide(Point('M'),Point('R'),Point('L'),Point('Q')), NotCollinear(Point('L'),Point('Q'),Point('R')), SameSide(Point('L'),Point('Q'),Point('M'),Point('P')), NotCollinear(Point('P'),Point('Q'),Point('R')), SameSide(Point('Q'),Point('R'),Point('M'),Point('P')), SameSide(Point('M'),Point('R'),Point('P'),Point('Q')), SameSide(Point('M'),Point('P'),Point('L'),Point('Q')), SameSide(Point('P'),Point('R'),Point('L'),Point('Q')), Between(Point('R'),Point('L'),Point('P')), NotCollinear(Point('L'),Point('P'),Point('Q')), SameSide(Point('P'),Point('R'),Point('L'),Point('M')), NotCollinear(Point('M'),Point('P'),Point('Q')), OppositeSide(Point('M'),Point('Q'),Point('P'),Point('R')), OppositeSide(Point('L'),Point('P'),Point('Q'),Point('R')), Between(Point('R'),Point('M'),Point('Q')), NotCollinear(Point('L'),Point('M'),Point('P')), SameSide(Point('L'),Point('R'),Point('M'),Point('P')), OppositeSide(Point('M'),Point('Q'),Point('L'),Point('R')), SameSide(Point('P'),Point('Q'),Point('L'),Point('M')), NotCollinear(Point('L'),Point('M'),Point('Q'))}

