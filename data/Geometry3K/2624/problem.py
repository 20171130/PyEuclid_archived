import sympy
from pyeuclid.formalization.relation import *

pi = sympy.pi


conditions = [(Angle(Point('B'),Point('C'),Point('D')) - Variable('angle_10')), (Angle(Point('B'),Point('C'),Point('E')) - Variable('angle_9')), Between(Point('C'),Point('A'),Point('B')), Collinear(Point('A'),Point('B'),Point('C')), Between(Point('C'),Point('D'),Point('E')), Collinear(Point('C'),Point('D'),Point('E')), (Variable('angle_9') - ((((sympy.simplify('2') * Variable('x')) - sympy.simplify('4')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Variable('angle_10') - ((((sympy.simplify('2') * Variable('x')) + sympy.simplify('4')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Variable('angle_9') - ((((sympy.simplify('2') * Variable('x')) - sympy.simplify('4')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Variable('angle_10') - ((((sympy.simplify('2') * Variable('x')) + sympy.simplify('4')) / sympy.simplify('180')) * sympy.simplify('pi')))]
goal = Variable('angle_10')
solution = '(94)/180*pi'

diagrammatic_relations = [SameSide(Point('C'),Point('D'),Point('B'),Point('E')), NotCollinear(Point('A'),Point('B'),Point('E')), SameSide(Point('A'),Point('C'),Point('B'),Point('D')), SameSide(Point('B'),Point('E'),Point('A'),Point('D')), SameSide(Point('B'),Point('C'),Point('A'),Point('E')), OppositeSide(Point('A'),Point('B'),Point('C'),Point('D')), SameSide(Point('B'),Point('D'),Point('A'),Point('E')), Between(Point('C'),Point('A'),Point('B')), NotCollinear(Point('A'),Point('C'),Point('E')), SameSide(Point('A'),Point('D'),Point('B'),Point('E')), SameSide(Point('C'),Point('D'),Point('A'),Point('E')), SameSide(Point('A'),Point('C'),Point('B'),Point('E')), SameSide(Point('C'),Point('E'),Point('B'),Point('D')), SameSide(Point('A'),Point('E'),Point('B'),Point('D')), OppositeSide(Point('D'),Point('E'),Point('B'),Point('C')), NotCollinear(Point('A'),Point('B'),Point('D')), NotCollinear(Point('B'),Point('C'),Point('E')), SameSide(Point('B'),Point('C'),Point('A'),Point('D')), NotCollinear(Point('A'),Point('C'),Point('D')), SameSide(Point('C'),Point('E'),Point('A'),Point('D')), OppositeSide(Point('A'),Point('B'),Point('C'),Point('E')), OppositeSide(Point('D'),Point('E'),Point('A'),Point('B')), NotCollinear(Point('A'),Point('D'),Point('E')), OppositeSide(Point('A'),Point('B'),Point('D'),Point('E')), NotCollinear(Point('B'),Point('D'),Point('E')), NotCollinear(Point('B'),Point('C'),Point('D')), OppositeSide(Point('D'),Point('E'),Point('A'),Point('C'))]

new_diagrammatic_relations = {NotCollinear(Point('A'),Point('D'),Point('E')), NotCollinear(Point('B'),Point('C'),Point('D')), NotCollinear(Point('B'),Point('D'),Point('E')), NotCollinear(Point('B'),Point('C'),Point('E')), SameSide(Point('C'),Point('D'),Point('B'),Point('E')), OppositeSide(Point('A'),Point('B'),Point('C'),Point('D')), SameSide(Point('C'),Point('E'),Point('B'),Point('D')), Between(Point('C'),Point('D'),Point('E')), SameSide(Point('A'),Point('C'),Point('B'),Point('D')), SameSide(Point('B'),Point('E'),Point('A'),Point('D')), SameSide(Point('B'),Point('D'),Point('A'),Point('E')), OppositeSide(Point('A'),Point('B'),Point('D'),Point('E')), OppositeSide(Point('D'),Point('E'),Point('A'),Point('B')), SameSide(Point('B'),Point('C'),Point('A'),Point('E')), SameSide(Point('A'),Point('D'),Point('B'),Point('E')), NotCollinear(Point('A'),Point('C'),Point('E')), OppositeSide(Point('D'),Point('E'),Point('B'),Point('C')), SameSide(Point('C'),Point('D'),Point('A'),Point('E')), NotCollinear(Point('A'),Point('C'),Point('D')), SameSide(Point('B'),Point('C'),Point('A'),Point('D')), SameSide(Point('A'),Point('C'),Point('B'),Point('E')), Between(Point('C'),Point('A'),Point('B')), NotCollinear(Point('A'),Point('B'),Point('D')), NotCollinear(Point('A'),Point('B'),Point('E')), SameSide(Point('A'),Point('E'),Point('B'),Point('D')), SameSide(Point('C'),Point('E'),Point('A'),Point('D')), OppositeSide(Point('D'),Point('E'),Point('A'),Point('C')), OppositeSide(Point('A'),Point('B'),Point('C'),Point('E'))}

