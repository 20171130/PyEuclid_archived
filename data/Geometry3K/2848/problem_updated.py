import sympy
from pyeuclid.formalization.relation import *

pi = sympy.pi


conditions = [(Length(Point('F'),Point('N')) - (((sympy.simplify('1') / sympy.simplify('4')) * Variable('x')) + sympy.simplify('6'))), (Length(Point('I'),Point('P')) - (sympy.simplify('12') - (sympy.simplify('3') * Variable('y')))), (Length(Point('D'),Point('P')) - (sympy.simplify('16') - (sympy.simplify('5') * Variable('y')))), (Length(Point('A'),Point('N')) - ((sympy.simplify('2') * Variable('x')) - sympy.simplify('29'))), Between(Point('N'),Point('A'),Point('F')), Collinear(Point('A'),Point('F'),Point('N')), Between(Point('D'),Point('A'),Point('G')), Collinear(Point('A'),Point('D'),Point('G')), Between(Point('F'),Point('A'),Point('K')), Collinear(Point('A'),Point('F'),Point('K')), Between(Point('N'),Point('A'),Point('K')), Collinear(Point('A'),Point('K'),Point('N')), Between(Point('I'),Point('D'),Point('E')), Collinear(Point('D'),Point('E'),Point('I')), Between(Point('P'),Point('D'),Point('E')), Collinear(Point('D'),Point('E'),Point('P')), Between(Point('P'),Point('D'),Point('I')), Collinear(Point('D'),Point('I'),Point('P')), Between(Point('A'),Point('D'),Point('L')), Collinear(Point('A'),Point('D'),Point('L')), Between(Point('I'),Point('B'),Point('F')), Collinear(Point('B'),Point('F'),Point('I')), Between(Point('A'),Point('F'),Point('J')), Collinear(Point('A'),Point('F'),Point('J')), Between(Point('N'),Point('F'),Point('J')), Collinear(Point('F'),Point('J'),Point('N')), Between(Point('A'),Point('G'),Point('L')), Collinear(Point('A'),Point('G'),Point('L')), Between(Point('D'),Point('G'),Point('L')), Collinear(Point('D'),Point('G'),Point('L')), Between(Point('A'),Point('J'),Point('K')), Collinear(Point('A'),Point('J'),Point('K')), Between(Point('F'),Point('J'),Point('K')), Collinear(Point('F'),Point('J'),Point('K')), Between(Point('N'),Point('J'),Point('K')), Collinear(Point('J'),Point('K'),Point('N')), Between(Point('A'),Point('J'),Point('N')), Collinear(Point('A'),Point('J'),Point('N')), Between(Point('F'),Point('K'),Point('N')), Collinear(Point('F'),Point('K'),Point('N')), Between(Point('P'),Point('N'),Point('O')), Collinear(Point('N'),Point('O'),Point('P')), Between(Point('F'),Point('B'),Point('C')), Collinear(Point('B'),Point('C'),Point('F')), Between(Point('I'),Point('B'),Point('C')), Collinear(Point('B'),Point('C'),Point('I')), Between(Point('F'),Point('C'),Point('I')), Collinear(Point('C'),Point('F'),Point('I')), Between(Point('D'),Point('I'),Point('M')), Collinear(Point('D'),Point('I'),Point('M')), Between(Point('P'),Point('I'),Point('M')), Collinear(Point('I'),Point('M'),Point('P')), Between(Point('D'),Point('E'),Point('M')), Collinear(Point('D'),Point('E'),Point('M')), Between(Point('I'),Point('E'),Point('M')), Collinear(Point('E'),Point('I'),Point('M')), Between(Point('P'),Point('E'),Point('M')), Collinear(Point('E'),Point('M'),Point('P')), Between(Point('I'),Point('E'),Point('P')), Collinear(Point('E'),Point('I'),Point('P')), Between(Point('D'),Point('M'),Point('P')), Collinear(Point('D'),Point('M'),Point('P')), Between(Point('N'),Point('H'),Point('P')), Collinear(Point('H'),Point('N'),Point('P')), Between(Point('N'),Point('H'),Point('O')), Collinear(Point('H'),Point('N'),Point('O')), Between(Point('P'),Point('H'),Point('O')), Collinear(Point('H'),Point('O'),Point('P')), Parallel(Point('F'),Point('I'),Point('N'),Point('P')), Parallel(Point('A'),Point('D'),Point('N'),Point('P')), (Length(Point('I'),Point('P')) - Length(Point('D'),Point('P')))]
goal = Variable('y')
solution = '2'

diagrammatic_relations = []
new_diagrammatic_relations = []