import sympy
from pyeuclid.formalization.relation import *

pi = sympy.pi


conditions = [(Angle(Point('C'),Point('B'),Point('D')) - (((sympy.simplify('5') * Variable('y')) / sympy.simplify('180')) * sympy.simplify('pi'))), (Angle(Point('B'),Point('C'),Point('D')) - sympy.simplify('55/180*pi')), (Length(Point('D'),Point('E')) - (Variable('x') + sympy.simplify('4'))), (Length(Point('A'),Point('E')) - ((sympy.simplify('3') * Variable('x')) - sympy.simplify('6'))), (Angle(Point('A'),Point('C'),Point('E')) - sympy.simplify('60/180*pi')), Between(Point('E'),Point('A'),Point('D')), Collinear(Point('A'),Point('D'),Point('E')), Between(Point('E'),Point('B'),Point('C')), Collinear(Point('B'),Point('C'),Point('E')), Parallelogram(Point('A'),Point('B'),Point('D'),Point('C'))]
goal = Variable('x')
solution = '5'

diagrammatic_relations = [NotCollinear(Point('A'),Point('B'),Point('E')), SameSide(Point('C'),Point('D'),Point('A'),Point('B')), SameSide(Point('A'),Point('E'),Point('C'),Point('D')), SameSide(Point('A'),Point('C'),Point('B'),Point('D')), SameSide(Point('A'),Point('B'),Point('C'),Point('D')), SameSide(Point('D'),Point('E'),Point('A'),Point('B')), SameSide(Point('C'),Point('E'),Point('A'),Point('B')), NotCollinear(Point('A'),Point('C'),Point('E')), OppositeSide(Point('A'),Point('D'),Point('B'),Point('E')), OppositeSide(Point('A'),Point('D'),Point('C'),Point('E')), OppositeSide(Point('B'),Point('C'),Point('A'),Point('E')), SameSide(Point('B'),Point('E'),Point('C'),Point('D')), SameSide(Point('C'),Point('E'),Point('B'),Point('D')), SameSide(Point('A'),Point('E'),Point('B'),Point('D')), NotCollinear(Point('A'),Point('B'),Point('D')), NotCollinear(Point('C'),Point('D'),Point('E')), SameSide(Point('B'),Point('E'),Point('A'),Point('C')), OppositeSide(Point('B'),Point('C'),Point('A'),Point('D')), SameSide(Point('D'),Point('E'),Point('A'),Point('C')), NotCollinear(Point('A'),Point('C'),Point('D')), NotCollinear(Point('A'),Point('B'),Point('C')), OppositeSide(Point('B'),Point('C'),Point('D'),Point('E')), OppositeSide(Point('A'),Point('D'),Point('B'),Point('C')), NotCollinear(Point('B'),Point('C'),Point('D')), NotCollinear(Point('B'),Point('D'),Point('E')), SameSide(Point('B'),Point('D'),Point('A'),Point('C'))]
